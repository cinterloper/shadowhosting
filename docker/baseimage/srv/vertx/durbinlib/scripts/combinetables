#!/usr/bin/env groovy

import durbin.util.*

// getMAF.R gets MAF data from Synapse. 
//

err = System.err

options = ParseOptions(args)

// Figure out the size of the output table we're going to need by 
// scanning the input files...	
allGenes = [] as Set
allPatients = [] as Set
files = options.fileNames
files.each{file->
	err.println "Pre-scanning $file..."
	new File(file).withReader{r->
		patients = parsePatientsFromHeading(r.readLine())
		allPatients.addAll(patients)
		r.eachLine{line->
		(gene,vals) = parseGeneValuesFromLine(line)
			if (gene.contains("?")) return; // Skip genes with ? in name...
			//gene = "${gene}_nonsyn" as String// hack to fix gene names...
			allGenes << gene
		}
	}		
}	
err.println "Total columns: ${allPatients.size()}.  Total rows: ${allGenes.size()}"
	
// Now fill in the table with the information from these files...	
combinedTable = new Table(allGenes as ArrayList,allPatients as ArrayList)

// Initialize table to contain the specified null value. 
combinedTable.assign(options.defaultValue)

files.each{file->
	err.println "Processing $file..."
	new File(file).withReader{r->
		patients = parsePatientsFromHeading(r.readLine())
		r.eachLine{line->
			(gene,vals) = parseGeneValuesFromLine(line)
			if (gene.contains("?")) return; // Skip genes with ? in name...
			//gene = "${gene}_nonsyn" as String// hack to fix gene names...
			vals.eachWithIndex{v,i->
				if ((v == null) || (v == "null")) v="NA"
				combinedTable.set(gene,patients[i],v)
			}
		}
	}		
}
	
err.println "Writing table to ${options.outFile} ..."
combinedTable.write(options.outFile,"\t")		


def parsePatientsFromHeading(heading){
	patients = heading.split("\t")
	patients = patients[1..-1] // omit first column
	return(patients)
}

def parseGeneValuesFromLine(line){
	fields = line.split("\t",-1) // -1 ensures that trailing delimiters are split
	gene = fields[0]
	
	// Some genes have format gene|number.  If so, clean those up...
	if (gene.contains("|")){
		fld = gene.split(/\|/)
		gene = fld[0]
	}
		
	vals = fields[1..-1] // 
	if (vals.size() != patients.size()){
		err.println "Values size (${vals.size()} != patients size (${patients.size()}))"
		System.exit(1)
	}
	return([gene,vals])
}


/****************************************************
* Parse the command line options, checking validity, printing help if needed. 
*/ 
def ParseOptions(args){
	parser = new Parser(description: '''	
	combinetables combines multiple tab delimited tables into one larger table, doing a
	union of the rows and columns. (row,col) pairs that do not appear in any file are 
	assigned a defaultValue which can be specified with the -v option.  
	
	NOTE: This script currently also removes anything after a '|' character in the row names. 
	  
	
	Written by: James Durbin (kdurbin@ucsc.edu)
	
	Use like:
	
	combinetables -o combined.tab -v "null" brca.tab coad.tab ucec.tab	

	''');

	parser.with{
		required 'o','outFile',[description: 'Name of file for combined output.']
		optional 'v','defaultValue',[description: 'Value to use for cells that do not appear in input.']
		optional 'p','prefixes',[
							description: 'Comma separated list of prefixes to append to row names from each input file respectively.',
							validate:{it.split(",")}]
	  flag 'h','help',[default:false,description: 'Print script help.']
		remainder{
			if(!it) throw new IllegalArgumentException("Must specify a list of files");
			it
		}
	}
	try{ 
		options = parser.parse(args); 
		options.fileNames = parser.remainder
		if (options.prefixes){
			if (options.prefixes.size() != options.fileNames.size()){
				System.err.println "Prefixes size != number of file names given."
				System.err << parser.usage
				System.exit(1)
			}
		}
	}catch(Exception e){
		System.err.println "Exception :"+e
		System.err << parser.usage;
		System.exit(1)}		
	return(options)
}
