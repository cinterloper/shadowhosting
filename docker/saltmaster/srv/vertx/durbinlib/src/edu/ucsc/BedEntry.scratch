package edu.ucsc;

import cern.colt.bitvector.*;

/*******************************************************************************************
* BED format provides a flexible way to define the data lines that are displayed in an annotation track.
* BED lines have three required fields and nine additional optional fields. The number of fields per line
* must be consistent throughout any single set of data in an annotation track. The order of the optional
* fields is binding: lower-numbered fields must always be populated if higher-numbered fields are used.
*
* The first three required BED fields are:
*
* chrom - The name of the chromosome (e.g. chr3, chrY, chr2_random) or scaffold (e.g. scaffold10671).
* chromStart - The starting position of the feature in the chromosome or scaffold. The first base in a chromosome is numbered 0.
* chromEnd - The ending position of the feature in the chromosome or scaffold. The chromEnd base is not
* included in the display of the feature. For example, the first 100 bases of a chromosome are defined
* as chromStart=0, chromEnd=100, and span the bases numbered 0-99.
* The 9 additional optional BED fields are:
*
* name - Defines the name of the BED line. This label is displayed to the left of the BED line in the
*        Genome Browser window when the track is open to full display mode or directly to the left of the item in pack mode.
* score -A score between 0 and 1000. If the track line useScore attribute is set to 1 for this
*        annotation data set, the score value will determine the level of gray in which this feature is displayed
* strand - Defines the strand - either '+' or '-'.
* thickStart - The starting position at which the feature is drawn thickly (for example, the start codon in gene displays).
* thickEnd - The ending position at which the feature is drawn thickly (for example, the stop codon in gene displays).
* itemRgb - An RGB value of the form R,G,B (e.g. 255,0,0). If the track line itemRgb attribute is set to "On",
* blockCount - The number of blocks (exons) in the BED line.
* blockSizes - A comma-separated list of the block sizes. The number of items in this list should correspond to blockCount.
* blockStarts - A comma-separated list of block starts. All of the blockStart positions should be calculated relative to chromStart.
*               The number of items in this list should correspond to blockCount.
* Example:
* Here's an example of an annotation track that uses a complete BED definition:
*
* track name=pairedReads description="Clone Paired Reads" useScore=1
* chr22 1000 5000 cloneA 960 + 1000 5000 0 2 567,488, 0,3512
* chr22 2000 6000 cloneB 900 - 2000 6000 0 2 433,399, 0,3601
*
******************************************************************************************/


/******************************************************************************************
* Example from Epigenomics dataset.. 8,605,199 lines.
*
* chr1    470     505     03_6:4:53:1761:816      1       +       0       0       255,0,0
* chr1    532     567     03_6:4:1:1544:1961      1       +       0       0       255,0,0
* chr1    2919    2954    03_6:4:95:1219:564      1       -       0       0       0,0,255
* chr1    4779    4814    03_6:4:72:1779:1880     1       +       0       0       255,0,0
* chr1    4782    4817    03_6:4:49:190:1071      1       -       0       0       0,0,255
* chr1    5222    5257    03_6:4:12:494:1872      1       -       0       0       0,0,255
* chr1    6037    6072    03_6:4:60:810:1740      1       -       0       0       0,0,255
*****************************************************************************************/

/****************************************************************************************
*  A single item in a bed graph.  This is called simply Bed in the kent codebase 
*  since it's a linked list and there is no separation between a single bed item and 
*  a whole list of them. 
* 
*  The simple implementation of this class is like:
* 
*  String chrom;          56 bytes  (40 bytes for 0 len string... 56 for 10 char string)
*  int    chromStart;      4 bytes 
*  int    chromEnd;        4 bytes
*  int    score;           4 bytes
*  char   strand;          2 bytes
*  object overhead         8 bytes
* 
*  total:  78 bytes/item.  Strings could be put in a map with int ref...
*  total2: 26 bytes/item with String intering 
* 
*  I've got it down to 73 bits of basic content.  That's 9 bytes + 8 bytes of object overhead
*  = 17 bytes.  However, since BitVector is a list of longs, it's either 8 or 16 bytes, so 
*  16+8 = 24 bytes/item with my "space savings".  Not worth the extra buggyness and/or 
*  confusion. 
*/
public class BedItem extends BitVector{
  final static int CHROM_BIT_START=0;
	final static int CHROM_BIT_END=5;

	final static int CHROMSTART_BIT_START= 6;
	final static int CHROMSTART_BIT_END= 33;

	final static int CHROMEND_BIT_START=34;
	final static int CHROMEND_BIT_END=61;

	final static int SCORE_BIT_START=62;
	final static int SCORE_BIT_END=71;
	final static int STRAND_BIT = 72;

	final static int ENTRYSIZE = 73;  // 73 bits total..  will resolve to two longs, 128 bits/entry, 16 bytes/entry.

	static Map<Integer,String> id2Chrom = new HashMap<Integer,String>();
	static Map<String,Integer> chrom2ID = new HashMap<String,Integer>();
	static int nextChromID = 0;  
	
	/*****************************************************************
	* Create a BitVector containing the information from one bed entry.
	*/
	public BedItem(String chrom,int chromStart,int chromEnd, int score,boolean strand) {

	  super(73); // We need 73 bits...
	  
		// just save an ID for the chromosome
		int chromID = nextChromID;
		if (chrom2ID.containsKey(chrom)) chromID = chrom2ID.get(chrom);
		else {
			int id = nextChromID;
			nextChromID++;
			chrom2ID.put(chrom,id);
			id2Chrom.put(id,chrom);
		}

		this.putLongFromTo((long)chromID,CHROM_BIT_START,CHROM_BIT_END);

		this.putLongFromTo((long)chromStart,CHROMSTART_BIT_START,CHROMSTART_BIT_END);
		this.putLongFromTo((long)chromEnd,CHROMEND_BIT_START,CHROMEND_BIT_END);

		this.putLongFromTo((long)score,SCORE_BIT_START,SCORE_BIT_END);
		this.put(STRAND_BIT,strand);
	}
	
	
	
	
}


